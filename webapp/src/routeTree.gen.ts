/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StructuresRouteImport } from './routes/structures/route'
import { Route as ProjectGroupsRouteImport } from './routes/project-groups/route'
import { Route as IndexImport } from './routes/index'
import { Route as StructuresIndexImport } from './routes/structures/index'
import { Route as ProjectGroupsIndexImport } from './routes/project-groups/index'
import { Route as LegalIndexImport } from './routes/legal/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as StructuresCreateImport } from './routes/structures/create'
import { Route as ProjectGroupsCreateImport } from './routes/project-groups/create'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as ProjectGroupsProjectGroupIdRouteImport } from './routes/project-groups_/$projectGroupId.route'
import { Route as ProjectGroupsProjectGroupIdIndexImport } from './routes/project-groups_/$projectGroupId.index'
import { Route as ProjectGroupsProjectGroupIdMembersImport } from './routes/project-groups_/$projectGroupId.members'
import { Route as ProjectGroupsProjectGroupIdDefaultsImport } from './routes/project-groups_/$projectGroupId.defaults'

// Create/Update Routes

const StructuresRouteRoute = StructuresRouteImport.update({
  id: '/structures',
  path: '/structures',
  getParentRoute: () => rootRoute,
} as any)

const ProjectGroupsRouteRoute = ProjectGroupsRouteImport.update({
  id: '/project-groups',
  path: '/project-groups',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StructuresIndexRoute = StructuresIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StructuresRouteRoute,
} as any)

const ProjectGroupsIndexRoute = ProjectGroupsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectGroupsRouteRoute,
} as any)

const LegalIndexRoute = LegalIndexImport.update({
  id: '/legal/',
  path: '/legal/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const StructuresCreateRoute = StructuresCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => StructuresRouteRoute,
} as any)

const ProjectGroupsCreateRoute = ProjectGroupsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => ProjectGroupsRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const ProjectGroupsProjectGroupIdRouteRoute =
  ProjectGroupsProjectGroupIdRouteImport.update({
    id: '/project-groups_/$projectGroupId',
    path: '/project-groups/$projectGroupId',
    getParentRoute: () => rootRoute,
  } as any)

const ProjectGroupsProjectGroupIdIndexRoute =
  ProjectGroupsProjectGroupIdIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProjectGroupsProjectGroupIdRouteRoute,
  } as any)

const ProjectGroupsProjectGroupIdMembersRoute =
  ProjectGroupsProjectGroupIdMembersImport.update({
    id: '/members',
    path: '/members',
    getParentRoute: () => ProjectGroupsProjectGroupIdRouteRoute,
  } as any)

const ProjectGroupsProjectGroupIdDefaultsRoute =
  ProjectGroupsProjectGroupIdDefaultsImport.update({
    id: '/defaults',
    path: '/defaults',
    getParentRoute: () => ProjectGroupsProjectGroupIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/project-groups': {
      id: '/project-groups'
      path: '/project-groups'
      fullPath: '/project-groups'
      preLoaderRoute: typeof ProjectGroupsRouteImport
      parentRoute: typeof rootRoute
    }
    '/structures': {
      id: '/structures'
      path: '/structures'
      fullPath: '/structures'
      preLoaderRoute: typeof StructuresRouteImport
      parentRoute: typeof rootRoute
    }
    '/project-groups_/$projectGroupId': {
      id: '/project-groups_/$projectGroupId'
      path: '/project-groups/$projectGroupId'
      fullPath: '/project-groups/$projectGroupId'
      preLoaderRoute: typeof ProjectGroupsProjectGroupIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/project-groups/create': {
      id: '/project-groups/create'
      path: '/create'
      fullPath: '/project-groups/create'
      preLoaderRoute: typeof ProjectGroupsCreateImport
      parentRoute: typeof ProjectGroupsRouteImport
    }
    '/structures/create': {
      id: '/structures/create'
      path: '/create'
      fullPath: '/structures/create'
      preLoaderRoute: typeof StructuresCreateImport
      parentRoute: typeof StructuresRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
    '/legal/': {
      id: '/legal/'
      path: '/legal'
      fullPath: '/legal'
      preLoaderRoute: typeof LegalIndexImport
      parentRoute: typeof rootRoute
    }
    '/project-groups/': {
      id: '/project-groups/'
      path: '/'
      fullPath: '/project-groups/'
      preLoaderRoute: typeof ProjectGroupsIndexImport
      parentRoute: typeof ProjectGroupsRouteImport
    }
    '/structures/': {
      id: '/structures/'
      path: '/'
      fullPath: '/structures/'
      preLoaderRoute: typeof StructuresIndexImport
      parentRoute: typeof StructuresRouteImport
    }
    '/project-groups_/$projectGroupId/defaults': {
      id: '/project-groups_/$projectGroupId/defaults'
      path: '/defaults'
      fullPath: '/project-groups/$projectGroupId/defaults'
      preLoaderRoute: typeof ProjectGroupsProjectGroupIdDefaultsImport
      parentRoute: typeof ProjectGroupsProjectGroupIdRouteImport
    }
    '/project-groups_/$projectGroupId/members': {
      id: '/project-groups_/$projectGroupId/members'
      path: '/members'
      fullPath: '/project-groups/$projectGroupId/members'
      preLoaderRoute: typeof ProjectGroupsProjectGroupIdMembersImport
      parentRoute: typeof ProjectGroupsProjectGroupIdRouteImport
    }
    '/project-groups_/$projectGroupId/': {
      id: '/project-groups_/$projectGroupId/'
      path: '/'
      fullPath: '/project-groups/$projectGroupId/'
      preLoaderRoute: typeof ProjectGroupsProjectGroupIdIndexImport
      parentRoute: typeof ProjectGroupsProjectGroupIdRouteImport
    }
  }
}

// Create and export the route tree

interface ProjectGroupsRouteRouteChildren {
  ProjectGroupsCreateRoute: typeof ProjectGroupsCreateRoute
  ProjectGroupsIndexRoute: typeof ProjectGroupsIndexRoute
}

const ProjectGroupsRouteRouteChildren: ProjectGroupsRouteRouteChildren = {
  ProjectGroupsCreateRoute: ProjectGroupsCreateRoute,
  ProjectGroupsIndexRoute: ProjectGroupsIndexRoute,
}

const ProjectGroupsRouteRouteWithChildren =
  ProjectGroupsRouteRoute._addFileChildren(ProjectGroupsRouteRouteChildren)

interface StructuresRouteRouteChildren {
  StructuresCreateRoute: typeof StructuresCreateRoute
  StructuresIndexRoute: typeof StructuresIndexRoute
}

const StructuresRouteRouteChildren: StructuresRouteRouteChildren = {
  StructuresCreateRoute: StructuresCreateRoute,
  StructuresIndexRoute: StructuresIndexRoute,
}

const StructuresRouteRouteWithChildren = StructuresRouteRoute._addFileChildren(
  StructuresRouteRouteChildren,
)

interface ProjectGroupsProjectGroupIdRouteRouteChildren {
  ProjectGroupsProjectGroupIdDefaultsRoute: typeof ProjectGroupsProjectGroupIdDefaultsRoute
  ProjectGroupsProjectGroupIdMembersRoute: typeof ProjectGroupsProjectGroupIdMembersRoute
  ProjectGroupsProjectGroupIdIndexRoute: typeof ProjectGroupsProjectGroupIdIndexRoute
}

const ProjectGroupsProjectGroupIdRouteRouteChildren: ProjectGroupsProjectGroupIdRouteRouteChildren =
  {
    ProjectGroupsProjectGroupIdDefaultsRoute:
      ProjectGroupsProjectGroupIdDefaultsRoute,
    ProjectGroupsProjectGroupIdMembersRoute:
      ProjectGroupsProjectGroupIdMembersRoute,
    ProjectGroupsProjectGroupIdIndexRoute:
      ProjectGroupsProjectGroupIdIndexRoute,
  }

const ProjectGroupsProjectGroupIdRouteRouteWithChildren =
  ProjectGroupsProjectGroupIdRouteRoute._addFileChildren(
    ProjectGroupsProjectGroupIdRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/project-groups': typeof ProjectGroupsRouteRouteWithChildren
  '/structures': typeof StructuresRouteRouteWithChildren
  '/project-groups/$projectGroupId': typeof ProjectGroupsProjectGroupIdRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/project-groups/create': typeof ProjectGroupsCreateRoute
  '/structures/create': typeof StructuresCreateRoute
  '/about': typeof AboutIndexRoute
  '/legal': typeof LegalIndexRoute
  '/project-groups/': typeof ProjectGroupsIndexRoute
  '/structures/': typeof StructuresIndexRoute
  '/project-groups/$projectGroupId/defaults': typeof ProjectGroupsProjectGroupIdDefaultsRoute
  '/project-groups/$projectGroupId/members': typeof ProjectGroupsProjectGroupIdMembersRoute
  '/project-groups/$projectGroupId/': typeof ProjectGroupsProjectGroupIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/project-groups/create': typeof ProjectGroupsCreateRoute
  '/structures/create': typeof StructuresCreateRoute
  '/about': typeof AboutIndexRoute
  '/legal': typeof LegalIndexRoute
  '/project-groups': typeof ProjectGroupsIndexRoute
  '/structures': typeof StructuresIndexRoute
  '/project-groups/$projectGroupId/defaults': typeof ProjectGroupsProjectGroupIdDefaultsRoute
  '/project-groups/$projectGroupId/members': typeof ProjectGroupsProjectGroupIdMembersRoute
  '/project-groups/$projectGroupId': typeof ProjectGroupsProjectGroupIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/project-groups': typeof ProjectGroupsRouteRouteWithChildren
  '/structures': typeof StructuresRouteRouteWithChildren
  '/project-groups_/$projectGroupId': typeof ProjectGroupsProjectGroupIdRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/project-groups/create': typeof ProjectGroupsCreateRoute
  '/structures/create': typeof StructuresCreateRoute
  '/about/': typeof AboutIndexRoute
  '/legal/': typeof LegalIndexRoute
  '/project-groups/': typeof ProjectGroupsIndexRoute
  '/structures/': typeof StructuresIndexRoute
  '/project-groups_/$projectGroupId/defaults': typeof ProjectGroupsProjectGroupIdDefaultsRoute
  '/project-groups_/$projectGroupId/members': typeof ProjectGroupsProjectGroupIdMembersRoute
  '/project-groups_/$projectGroupId/': typeof ProjectGroupsProjectGroupIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/project-groups'
    | '/structures'
    | '/project-groups/$projectGroupId'
    | '/auth/login'
    | '/project-groups/create'
    | '/structures/create'
    | '/about'
    | '/legal'
    | '/project-groups/'
    | '/structures/'
    | '/project-groups/$projectGroupId/defaults'
    | '/project-groups/$projectGroupId/members'
    | '/project-groups/$projectGroupId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/project-groups/create'
    | '/structures/create'
    | '/about'
    | '/legal'
    | '/project-groups'
    | '/structures'
    | '/project-groups/$projectGroupId/defaults'
    | '/project-groups/$projectGroupId/members'
    | '/project-groups/$projectGroupId'
  id:
    | '__root__'
    | '/'
    | '/project-groups'
    | '/structures'
    | '/project-groups_/$projectGroupId'
    | '/auth/login'
    | '/project-groups/create'
    | '/structures/create'
    | '/about/'
    | '/legal/'
    | '/project-groups/'
    | '/structures/'
    | '/project-groups_/$projectGroupId/defaults'
    | '/project-groups_/$projectGroupId/members'
    | '/project-groups_/$projectGroupId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectGroupsRouteRoute: typeof ProjectGroupsRouteRouteWithChildren
  StructuresRouteRoute: typeof StructuresRouteRouteWithChildren
  ProjectGroupsProjectGroupIdRouteRoute: typeof ProjectGroupsProjectGroupIdRouteRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AboutIndexRoute: typeof AboutIndexRoute
  LegalIndexRoute: typeof LegalIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectGroupsRouteRoute: ProjectGroupsRouteRouteWithChildren,
  StructuresRouteRoute: StructuresRouteRouteWithChildren,
  ProjectGroupsProjectGroupIdRouteRoute:
    ProjectGroupsProjectGroupIdRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AboutIndexRoute: AboutIndexRoute,
  LegalIndexRoute: LegalIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/project-groups",
        "/structures",
        "/project-groups_/$projectGroupId",
        "/auth/login",
        "/about/",
        "/legal/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/project-groups": {
      "filePath": "project-groups/route.tsx",
      "children": [
        "/project-groups/create",
        "/project-groups/"
      ]
    },
    "/structures": {
      "filePath": "structures/route.tsx",
      "children": [
        "/structures/create",
        "/structures/"
      ]
    },
    "/project-groups_/$projectGroupId": {
      "filePath": "project-groups_/$projectGroupId.route.tsx",
      "children": [
        "/project-groups_/$projectGroupId/defaults",
        "/project-groups_/$projectGroupId/members",
        "/project-groups_/$projectGroupId/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/project-groups/create": {
      "filePath": "project-groups/create.tsx",
      "parent": "/project-groups"
    },
    "/structures/create": {
      "filePath": "structures/create.tsx",
      "parent": "/structures"
    },
    "/about/": {
      "filePath": "about/index.tsx"
    },
    "/legal/": {
      "filePath": "legal/index.tsx"
    },
    "/project-groups/": {
      "filePath": "project-groups/index.tsx",
      "parent": "/project-groups"
    },
    "/structures/": {
      "filePath": "structures/index.tsx",
      "parent": "/structures"
    },
    "/project-groups_/$projectGroupId/defaults": {
      "filePath": "project-groups_/$projectGroupId.defaults.tsx",
      "parent": "/project-groups_/$projectGroupId"
    },
    "/project-groups_/$projectGroupId/members": {
      "filePath": "project-groups_/$projectGroupId.members.tsx",
      "parent": "/project-groups_/$projectGroupId"
    },
    "/project-groups_/$projectGroupId/": {
      "filePath": "project-groups_/$projectGroupId.index.tsx",
      "parent": "/project-groups_/$projectGroupId"
    }
  }
}
ROUTE_MANIFEST_END */
