/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductsRouteImport } from './routes/products/route'
import { Route as OrdersRouteImport } from './routes/orders/route'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as AboutRouteImport } from './routes/about/route'
import { Route as IndexImport } from './routes/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as OrdersIndexImport } from './routes/orders/index'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as ProductsProductUuidRouteImport } from './routes/products_/$productUuid.route'
import { Route as AdminProductsRouteImport } from './routes/admin/products/route'
import { Route as ProductsProductUuidIndexImport } from './routes/products_/$productUuid.index'
import { Route as AdminProductsIndexImport } from './routes/admin/products/index'
import { Route as AdminProductsCreateImport } from './routes/admin/products/create'
import { Route as AdminProductsProductUuidRouteImport } from './routes/admin/products_/$productUuid.route'
import { Route as AdminProductsProductUuidIndexImport } from './routes/admin/products_/$productUuid.index'

// Create/Update Routes

const ProductsRouteRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any)

const OrdersRouteRoute = OrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const AboutRouteRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProductsRouteRoute,
} as any)

const OrdersIndexRoute = OrdersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrdersRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const ProductsProductUuidRouteRoute = ProductsProductUuidRouteImport.update({
  id: '/products_/$productUuid',
  path: '/products/$productUuid',
  getParentRoute: () => rootRoute,
} as any)

const AdminProductsRouteRoute = AdminProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminRouteRoute,
} as any)

const ProductsProductUuidIndexRoute = ProductsProductUuidIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProductsProductUuidRouteRoute,
} as any)

const AdminProductsIndexRoute = AdminProductsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminProductsRouteRoute,
} as any)

const AdminProductsCreateRoute = AdminProductsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AdminProductsRouteRoute,
} as any)

const AdminProductsProductUuidRouteRoute =
  AdminProductsProductUuidRouteImport.update({
    id: '/products_/$productUuid',
    path: '/products/$productUuid',
    getParentRoute: () => AdminRouteRoute,
  } as any)

const AdminProductsProductUuidIndexRoute =
  AdminProductsProductUuidIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AdminProductsProductUuidRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersRouteImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin/products': {
      id: '/admin/products'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/products_/$productUuid': {
      id: '/products_/$productUuid'
      path: '/products/$productUuid'
      fullPath: '/products/$productUuid'
      preLoaderRoute: typeof ProductsProductUuidRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/orders/': {
      id: '/orders/'
      path: '/'
      fullPath: '/orders/'
      preLoaderRoute: typeof OrdersIndexImport
      parentRoute: typeof OrdersRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof ProductsRouteImport
    }
    '/admin/products_/$productUuid': {
      id: '/admin/products_/$productUuid'
      path: '/products/$productUuid'
      fullPath: '/admin/products/$productUuid'
      preLoaderRoute: typeof AdminProductsProductUuidRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/products/create': {
      id: '/admin/products/create'
      path: '/create'
      fullPath: '/admin/products/create'
      preLoaderRoute: typeof AdminProductsCreateImport
      parentRoute: typeof AdminProductsRouteImport
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/'
      fullPath: '/admin/products/'
      preLoaderRoute: typeof AdminProductsIndexImport
      parentRoute: typeof AdminProductsRouteImport
    }
    '/products_/$productUuid/': {
      id: '/products_/$productUuid/'
      path: '/'
      fullPath: '/products/$productUuid/'
      preLoaderRoute: typeof ProductsProductUuidIndexImport
      parentRoute: typeof ProductsProductUuidRouteImport
    }
    '/admin/products_/$productUuid/': {
      id: '/admin/products_/$productUuid/'
      path: '/'
      fullPath: '/admin/products/$productUuid/'
      preLoaderRoute: typeof AdminProductsProductUuidIndexImport
      parentRoute: typeof AdminProductsProductUuidRouteImport
    }
  }
}

// Create and export the route tree

interface AdminProductsRouteRouteChildren {
  AdminProductsCreateRoute: typeof AdminProductsCreateRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
}

const AdminProductsRouteRouteChildren: AdminProductsRouteRouteChildren = {
  AdminProductsCreateRoute: AdminProductsCreateRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
}

const AdminProductsRouteRouteWithChildren =
  AdminProductsRouteRoute._addFileChildren(AdminProductsRouteRouteChildren)

interface AdminProductsProductUuidRouteRouteChildren {
  AdminProductsProductUuidIndexRoute: typeof AdminProductsProductUuidIndexRoute
}

const AdminProductsProductUuidRouteRouteChildren: AdminProductsProductUuidRouteRouteChildren =
  {
    AdminProductsProductUuidIndexRoute: AdminProductsProductUuidIndexRoute,
  }

const AdminProductsProductUuidRouteRouteWithChildren =
  AdminProductsProductUuidRouteRoute._addFileChildren(
    AdminProductsProductUuidRouteRouteChildren,
  )

interface AdminRouteRouteChildren {
  AdminProductsRouteRoute: typeof AdminProductsRouteRouteWithChildren
  AdminProductsProductUuidRouteRoute: typeof AdminProductsProductUuidRouteRouteWithChildren
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminProductsRouteRoute: AdminProductsRouteRouteWithChildren,
  AdminProductsProductUuidRouteRoute:
    AdminProductsProductUuidRouteRouteWithChildren,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface OrdersRouteRouteChildren {
  OrdersIndexRoute: typeof OrdersIndexRoute
}

const OrdersRouteRouteChildren: OrdersRouteRouteChildren = {
  OrdersIndexRoute: OrdersIndexRoute,
}

const OrdersRouteRouteWithChildren = OrdersRouteRoute._addFileChildren(
  OrdersRouteRouteChildren,
)

interface ProductsRouteRouteChildren {
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const ProductsRouteRouteChildren: ProductsRouteRouteChildren = {
  ProductsIndexRoute: ProductsIndexRoute,
}

const ProductsRouteRouteWithChildren = ProductsRouteRoute._addFileChildren(
  ProductsRouteRouteChildren,
)

interface ProductsProductUuidRouteRouteChildren {
  ProductsProductUuidIndexRoute: typeof ProductsProductUuidIndexRoute
}

const ProductsProductUuidRouteRouteChildren: ProductsProductUuidRouteRouteChildren =
  {
    ProductsProductUuidIndexRoute: ProductsProductUuidIndexRoute,
  }

const ProductsProductUuidRouteRouteWithChildren =
  ProductsProductUuidRouteRoute._addFileChildren(
    ProductsProductUuidRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRouteRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/orders': typeof OrdersRouteRouteWithChildren
  '/products': typeof ProductsRouteRouteWithChildren
  '/admin/products': typeof AdminProductsRouteRouteWithChildren
  '/products/$productUuid': typeof ProductsProductUuidRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/orders/': typeof OrdersIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/admin/products/$productUuid': typeof AdminProductsProductUuidRouteRouteWithChildren
  '/admin/products/create': typeof AdminProductsCreateRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/products/$productUuid/': typeof ProductsProductUuidIndexRoute
  '/admin/products/$productUuid/': typeof AdminProductsProductUuidIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRouteRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/orders': typeof OrdersIndexRoute
  '/products': typeof ProductsIndexRoute
  '/admin/products/create': typeof AdminProductsCreateRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/products/$productUuid': typeof ProductsProductUuidIndexRoute
  '/admin/products/$productUuid': typeof AdminProductsProductUuidIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRouteRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/orders': typeof OrdersRouteRouteWithChildren
  '/products': typeof ProductsRouteRouteWithChildren
  '/admin/products': typeof AdminProductsRouteRouteWithChildren
  '/products_/$productUuid': typeof ProductsProductUuidRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/orders/': typeof OrdersIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/admin/products_/$productUuid': typeof AdminProductsProductUuidRouteRouteWithChildren
  '/admin/products/create': typeof AdminProductsCreateRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/products_/$productUuid/': typeof ProductsProductUuidIndexRoute
  '/admin/products_/$productUuid/': typeof AdminProductsProductUuidIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/admin'
    | '/orders'
    | '/products'
    | '/admin/products'
    | '/products/$productUuid'
    | '/auth/login'
    | '/orders/'
    | '/products/'
    | '/admin/products/$productUuid'
    | '/admin/products/create'
    | '/admin/products/'
    | '/products/$productUuid/'
    | '/admin/products/$productUuid/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/admin'
    | '/auth/login'
    | '/orders'
    | '/products'
    | '/admin/products/create'
    | '/admin/products'
    | '/products/$productUuid'
    | '/admin/products/$productUuid'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/admin'
    | '/orders'
    | '/products'
    | '/admin/products'
    | '/products_/$productUuid'
    | '/auth/login'
    | '/orders/'
    | '/products/'
    | '/admin/products_/$productUuid'
    | '/admin/products/create'
    | '/admin/products/'
    | '/products_/$productUuid/'
    | '/admin/products_/$productUuid/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRouteRoute: typeof AboutRouteRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  OrdersRouteRoute: typeof OrdersRouteRouteWithChildren
  ProductsRouteRoute: typeof ProductsRouteRouteWithChildren
  ProductsProductUuidRouteRoute: typeof ProductsProductUuidRouteRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRouteRoute: AboutRouteRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  OrdersRouteRoute: OrdersRouteRouteWithChildren,
  ProductsRouteRoute: ProductsRouteRouteWithChildren,
  ProductsProductUuidRouteRoute: ProductsProductUuidRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/admin",
        "/orders",
        "/products",
        "/products_/$productUuid",
        "/auth/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about/route.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/products",
        "/admin/products_/$productUuid"
      ]
    },
    "/orders": {
      "filePath": "orders/route.tsx",
      "children": [
        "/orders/"
      ]
    },
    "/products": {
      "filePath": "products/route.tsx",
      "children": [
        "/products/"
      ]
    },
    "/admin/products": {
      "filePath": "admin/products/route.tsx",
      "parent": "/admin",
      "children": [
        "/admin/products/create",
        "/admin/products/"
      ]
    },
    "/products_/$productUuid": {
      "filePath": "products_/$productUuid.route.tsx",
      "children": [
        "/products_/$productUuid/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/orders/": {
      "filePath": "orders/index.tsx",
      "parent": "/orders"
    },
    "/products/": {
      "filePath": "products/index.tsx",
      "parent": "/products"
    },
    "/admin/products_/$productUuid": {
      "filePath": "admin/products_/$productUuid.route.tsx",
      "parent": "/admin",
      "children": [
        "/admin/products_/$productUuid/"
      ]
    },
    "/admin/products/create": {
      "filePath": "admin/products/create.tsx",
      "parent": "/admin/products"
    },
    "/admin/products/": {
      "filePath": "admin/products/index.tsx",
      "parent": "/admin/products"
    },
    "/products_/$productUuid/": {
      "filePath": "products_/$productUuid.index.tsx",
      "parent": "/products_/$productUuid"
    },
    "/admin/products_/$productUuid/": {
      "filePath": "admin/products_/$productUuid.index.tsx",
      "parent": "/admin/products_/$productUuid"
    }
  }
}
ROUTE_MANIFEST_END */
