/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProductsRouteRouteImport } from './routes/products/route'
import { Route as OrdersRouteRouteImport } from './routes/orders/route'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as OrdersIndexRouteImport } from './routes/orders/index'
import { Route as LegalIndexRouteImport } from './routes/legal/index'
import { Route as ContactIndexRouteImport } from './routes/contact/index'
import { Route as AboutIndexRouteImport } from './routes/about/index'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as ProductsProductUuidRouteRouteImport } from './routes/products_/$productUuid.route'
import { Route as AdminProductsRouteRouteImport } from './routes/admin/products/route'
import { Route as ProductsProductUuidIndexRouteImport } from './routes/products_/$productUuid.index'
import { Route as AdminProductsIndexRouteImport } from './routes/admin/products/index'
import { Route as AdminProductsCreateRouteImport } from './routes/admin/products/create'
import { Route as AdminProductsProductUuidRouteRouteImport } from './routes/admin/products_/$productUuid.route'
import { Route as AdminProductsProductUuidIndexRouteImport } from './routes/admin/products_/$productUuid.index'

const ProductsRouteRoute = ProductsRouteRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersRouteRoute = OrdersRouteRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProductsRouteRoute,
} as any)
const OrdersIndexRoute = OrdersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrdersRouteRoute,
} as any)
const LegalIndexRoute = LegalIndexRouteImport.update({
  id: '/legal/',
  path: '/legal/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactIndexRoute = ContactIndexRouteImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsProductUuidRouteRoute =
  ProductsProductUuidRouteRouteImport.update({
    id: '/products_/$productUuid',
    path: '/products/$productUuid',
    getParentRoute: () => rootRouteImport,
  } as any)
const AdminProductsRouteRoute = AdminProductsRouteRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminRouteRoute,
} as any)
const ProductsProductUuidIndexRoute =
  ProductsProductUuidIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProductsProductUuidRouteRoute,
  } as any)
const AdminProductsIndexRoute = AdminProductsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminProductsRouteRoute,
} as any)
const AdminProductsCreateRoute = AdminProductsCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AdminProductsRouteRoute,
} as any)
const AdminProductsProductUuidRouteRoute =
  AdminProductsProductUuidRouteRouteImport.update({
    id: '/products_/$productUuid',
    path: '/products/$productUuid',
    getParentRoute: () => AdminRouteRoute,
  } as any)
const AdminProductsProductUuidIndexRoute =
  AdminProductsProductUuidIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AdminProductsProductUuidRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/orders': typeof OrdersRouteRouteWithChildren
  '/products': typeof ProductsRouteRouteWithChildren
  '/admin/products': typeof AdminProductsRouteRouteWithChildren
  '/products/$productUuid': typeof ProductsProductUuidRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/about': typeof AboutIndexRoute
  '/contact': typeof ContactIndexRoute
  '/legal': typeof LegalIndexRoute
  '/orders/': typeof OrdersIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/admin/products/$productUuid': typeof AdminProductsProductUuidRouteRouteWithChildren
  '/admin/products/create': typeof AdminProductsCreateRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/products/$productUuid/': typeof ProductsProductUuidIndexRoute
  '/admin/products/$productUuid/': typeof AdminProductsProductUuidIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/about': typeof AboutIndexRoute
  '/contact': typeof ContactIndexRoute
  '/legal': typeof LegalIndexRoute
  '/orders': typeof OrdersIndexRoute
  '/products': typeof ProductsIndexRoute
  '/admin/products/create': typeof AdminProductsCreateRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/products/$productUuid': typeof ProductsProductUuidIndexRoute
  '/admin/products/$productUuid': typeof AdminProductsProductUuidIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/orders': typeof OrdersRouteRouteWithChildren
  '/products': typeof ProductsRouteRouteWithChildren
  '/admin/products': typeof AdminProductsRouteRouteWithChildren
  '/products_/$productUuid': typeof ProductsProductUuidRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/about/': typeof AboutIndexRoute
  '/contact/': typeof ContactIndexRoute
  '/legal/': typeof LegalIndexRoute
  '/orders/': typeof OrdersIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/admin/products_/$productUuid': typeof AdminProductsProductUuidRouteRouteWithChildren
  '/admin/products/create': typeof AdminProductsCreateRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/products_/$productUuid/': typeof ProductsProductUuidIndexRoute
  '/admin/products_/$productUuid/': typeof AdminProductsProductUuidIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/orders'
    | '/products'
    | '/admin/products'
    | '/products/$productUuid'
    | '/auth/login'
    | '/about'
    | '/contact'
    | '/legal'
    | '/orders/'
    | '/products/'
    | '/admin/products/$productUuid'
    | '/admin/products/create'
    | '/admin/products/'
    | '/products/$productUuid/'
    | '/admin/products/$productUuid/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/auth/login'
    | '/about'
    | '/contact'
    | '/legal'
    | '/orders'
    | '/products'
    | '/admin/products/create'
    | '/admin/products'
    | '/products/$productUuid'
    | '/admin/products/$productUuid'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/orders'
    | '/products'
    | '/admin/products'
    | '/products_/$productUuid'
    | '/auth/login'
    | '/about/'
    | '/contact/'
    | '/legal/'
    | '/orders/'
    | '/products/'
    | '/admin/products_/$productUuid'
    | '/admin/products/create'
    | '/admin/products/'
    | '/products_/$productUuid/'
    | '/admin/products_/$productUuid/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  OrdersRouteRoute: typeof OrdersRouteRouteWithChildren
  ProductsRouteRoute: typeof ProductsRouteRouteWithChildren
  ProductsProductUuidRouteRoute: typeof ProductsProductUuidRouteRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AboutIndexRoute: typeof AboutIndexRoute
  ContactIndexRoute: typeof ContactIndexRoute
  LegalIndexRoute: typeof LegalIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof ProductsRouteRoute
    }
    '/orders/': {
      id: '/orders/'
      path: '/'
      fullPath: '/orders/'
      preLoaderRoute: typeof OrdersIndexRouteImport
      parentRoute: typeof OrdersRouteRoute
    }
    '/legal/': {
      id: '/legal/'
      path: '/legal'
      fullPath: '/legal'
      preLoaderRoute: typeof LegalIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact/': {
      id: '/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products_/$productUuid': {
      id: '/products_/$productUuid'
      path: '/products/$productUuid'
      fullPath: '/products/$productUuid'
      preLoaderRoute: typeof ProductsProductUuidRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/products': {
      id: '/admin/products'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/products_/$productUuid/': {
      id: '/products_/$productUuid/'
      path: '/'
      fullPath: '/products/$productUuid/'
      preLoaderRoute: typeof ProductsProductUuidIndexRouteImport
      parentRoute: typeof ProductsProductUuidRouteRoute
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/'
      fullPath: '/admin/products/'
      preLoaderRoute: typeof AdminProductsIndexRouteImport
      parentRoute: typeof AdminProductsRouteRoute
    }
    '/admin/products/create': {
      id: '/admin/products/create'
      path: '/create'
      fullPath: '/admin/products/create'
      preLoaderRoute: typeof AdminProductsCreateRouteImport
      parentRoute: typeof AdminProductsRouteRoute
    }
    '/admin/products_/$productUuid': {
      id: '/admin/products_/$productUuid'
      path: '/products/$productUuid'
      fullPath: '/admin/products/$productUuid'
      preLoaderRoute: typeof AdminProductsProductUuidRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/products_/$productUuid/': {
      id: '/admin/products_/$productUuid/'
      path: '/'
      fullPath: '/admin/products/$productUuid/'
      preLoaderRoute: typeof AdminProductsProductUuidIndexRouteImport
      parentRoute: typeof AdminProductsProductUuidRouteRoute
    }
  }
}

interface AdminProductsRouteRouteChildren {
  AdminProductsCreateRoute: typeof AdminProductsCreateRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
}

const AdminProductsRouteRouteChildren: AdminProductsRouteRouteChildren = {
  AdminProductsCreateRoute: AdminProductsCreateRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
}

const AdminProductsRouteRouteWithChildren =
  AdminProductsRouteRoute._addFileChildren(AdminProductsRouteRouteChildren)

interface AdminProductsProductUuidRouteRouteChildren {
  AdminProductsProductUuidIndexRoute: typeof AdminProductsProductUuidIndexRoute
}

const AdminProductsProductUuidRouteRouteChildren: AdminProductsProductUuidRouteRouteChildren =
  {
    AdminProductsProductUuidIndexRoute: AdminProductsProductUuidIndexRoute,
  }

const AdminProductsProductUuidRouteRouteWithChildren =
  AdminProductsProductUuidRouteRoute._addFileChildren(
    AdminProductsProductUuidRouteRouteChildren,
  )

interface AdminRouteRouteChildren {
  AdminProductsRouteRoute: typeof AdminProductsRouteRouteWithChildren
  AdminProductsProductUuidRouteRoute: typeof AdminProductsProductUuidRouteRouteWithChildren
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminProductsRouteRoute: AdminProductsRouteRouteWithChildren,
  AdminProductsProductUuidRouteRoute:
    AdminProductsProductUuidRouteRouteWithChildren,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface OrdersRouteRouteChildren {
  OrdersIndexRoute: typeof OrdersIndexRoute
}

const OrdersRouteRouteChildren: OrdersRouteRouteChildren = {
  OrdersIndexRoute: OrdersIndexRoute,
}

const OrdersRouteRouteWithChildren = OrdersRouteRoute._addFileChildren(
  OrdersRouteRouteChildren,
)

interface ProductsRouteRouteChildren {
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const ProductsRouteRouteChildren: ProductsRouteRouteChildren = {
  ProductsIndexRoute: ProductsIndexRoute,
}

const ProductsRouteRouteWithChildren = ProductsRouteRoute._addFileChildren(
  ProductsRouteRouteChildren,
)

interface ProductsProductUuidRouteRouteChildren {
  ProductsProductUuidIndexRoute: typeof ProductsProductUuidIndexRoute
}

const ProductsProductUuidRouteRouteChildren: ProductsProductUuidRouteRouteChildren =
  {
    ProductsProductUuidIndexRoute: ProductsProductUuidIndexRoute,
  }

const ProductsProductUuidRouteRouteWithChildren =
  ProductsProductUuidRouteRoute._addFileChildren(
    ProductsProductUuidRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  OrdersRouteRoute: OrdersRouteRouteWithChildren,
  ProductsRouteRoute: ProductsRouteRouteWithChildren,
  ProductsProductUuidRouteRoute: ProductsProductUuidRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AboutIndexRoute: AboutIndexRoute,
  ContactIndexRoute: ContactIndexRoute,
  LegalIndexRoute: LegalIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
